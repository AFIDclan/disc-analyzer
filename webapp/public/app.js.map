{
  "version": 3,
  "sources": ["../src/app.js"],
  "sourcesContent": ["// Disc Analyzer Web Application\nclass DiscAnalyzer {\n    constructor() {\n        this.jobs = [];\n        this.currentJobId = null;\n        this.refreshInterval = null;\n        this.cpuInterval = null;\n        this.authenticated = false;\n        this.availableModels = [];\n        \n        this.init();\n    }\n\n    async init() {\n        this.bindEvents();\n        await this.checkAuthStatus();\n        \n        if (this.authenticated) {\n            this.showMainContent();\n            await this.loadModels();\n            this.loadJobs();\n            this.startAutoRefresh();\n            this.startCpuMonitoring();\n        } else {\n            this.showAuthSection();\n        }\n    }\n\n    bindEvents() {\n        // Login form\n        document.getElementById('login-form').addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.login();\n        });\n\n        // Logout\n        document.getElementById('logout-btn').addEventListener('click', () => {\n            this.logout();\n        });\n\n        // Tab navigation\n        document.querySelectorAll('.nav-tab').forEach(tab => {\n            if (tab.dataset.tab) {\n                tab.addEventListener('click', () => this.switchTab(tab.dataset.tab));\n            }\n        });\n\n        // Refresh jobs\n        document.getElementById('refresh-jobs').addEventListener('click', () => {\n            this.loadJobs();\n        });\n\n        // Job form submission\n        document.getElementById('job-form').addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.createJob();\n        });\n\n        // AoA preset selection\n        document.getElementById('aoa-preset').addEventListener('change', (e) => {\n            this.handleAoAPreset(e.target.value);\n        });\n\n        // File upload\n        document.getElementById('file-upload').addEventListener('change', (e) => {\n            const uploadBtn = document.getElementById('upload-btn');\n            uploadBtn.disabled = !e.target.files.length;\n        });\n\n        document.getElementById('upload-btn').addEventListener('click', () => {\n            this.uploadFile();\n        });\n\n        // Modal events\n        document.querySelector('.modal-close').addEventListener('click', () => {\n            this.closeModal();\n        });\n\n        document.getElementById('job-modal').addEventListener('click', (e) => {\n            if (e.target === e.currentTarget) {\n                this.closeModal();\n            }\n        });\n\n        // ESC key to close modal\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape') {\n                this.closeModal();\n            }\n        });\n    }\n\n    switchTab(tabName) {\n        // Update tab buttons\n        document.querySelectorAll('.nav-tab').forEach(tab => {\n            tab.classList.toggle('active', tab.dataset.tab === tabName);\n        });\n\n        // Update tab content\n        document.querySelectorAll('.tab-content').forEach(content => {\n            content.classList.toggle('active', content.id === `${tabName}-tab`);\n        });\n    }\n\n    handleAoAPreset(preset) {\n        const aoaInput = document.getElementById('aoa-values');\n        const presets = {\n            'basic': '-10, -5, 0, 5, 10',\n            'extended': '-20, -15, -10, -5, 0, 5, 10, 15, 20',\n            'full': '-60, -50, -40, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 60, 70, 80, 90'\n        };\n\n        if (presets[preset]) {\n            aoaInput.value = presets[preset];\n        }\n    }\n\n    async loadJobs() {\n        try {\n            this.showLoading();\n            const response = await fetch('/api/jobs');\n            if (!response.ok) throw new Error('Failed to load jobs');\n            \n            this.jobs = await response.json();\n            this.renderJobs();\n        } catch (error) {\n            console.error('Error loading jobs:', error);\n            this.showError('Failed to load jobs');\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async createJob() {\n        try {\n            const formData = new FormData(document.getElementById('job-form'));\n            const aoaString = formData.get('angleOfAttacks');\n            \n            // Parse angle of attacks\n            const angleOfAttacks = aoaString\n                .split(',')\n                .map(s => parseFloat(s.trim()))\n                .filter(n => !isNaN(n));\n\n            if (angleOfAttacks.length === 0) {\n                throw new Error('Please provide valid angles of attack');\n            }\n\n            const jobData = {\n                name: formData.get('name'),\n                modelPath: formData.get('modelPath'),\n                processors: parseInt(formData.get('processors')),\n                angleOfAttacks: angleOfAttacks\n            };\n\n            const response = await fetch('/api/jobs', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(jobData)\n            });\n\n            if (!response.ok) {\n                const error = await response.json();\n                throw new Error(error.error || 'Failed to create job');\n            }\n\n            const result = await response.json();\n            \n            // Reset form and switch to jobs tab\n            document.getElementById('job-form').reset();\n            this.switchTab('jobs');\n            \n            // Reload jobs\n            await this.loadJobs();\n            \n            this.showSuccess(`Job \"${jobData.name}\" created successfully!`);\n        } catch (error) {\n            console.error('Error creating job:', error);\n            this.showError(error.message);\n        }\n    }\n\n    renderJobs() {\n        const jobsList = document.getElementById('jobs-list');\n        \n        if (this.jobs.length === 0) {\n            jobsList.innerHTML = `\n                <div class=\"loading\">\n                    <p>No jobs found. Create your first simulation job!</p>\n                </div>\n            `;\n            return;\n        }\n\n        // Sort jobs by creation date (newest first)\n        const sortedJobs = [...this.jobs].sort((a, b) => \n            new Date(b.created) - new Date(a.created)\n        );\n\n        jobsList.innerHTML = sortedJobs.map(job => this.renderJobCard(job)).join('');\n\n        // Bind click events\n        jobsList.querySelectorAll('.job-card').forEach((card, index) => {\n            card.addEventListener('click', () => {\n                this.showJobDetail(sortedJobs[index]);\n            });\n        });\n    }\n\n    renderJobCard(job) {\n        const createdDate = new Date(job.created).toLocaleString();\n        const progressWidth = job.progress || 0;\n        \n        return `\n            <div class=\"job-card\" data-job-id=\"${job.id}\">\n                <div class=\"job-header\">\n                    <h3 class=\"job-title\">${job.name}</h3>\n                    <span class=\"job-status ${job.status}\">${job.status}</span>\n                </div>\n                \n                <div class=\"job-info\">\n                    <div class=\"job-info-item\">\n                        <span class=\"job-info-label\">Model</span>\n                        <span class=\"job-info-value\">${job.modelPath}</span>\n                    </div>\n                    <div class=\"job-info-item\">\n                        <span class=\"job-info-label\">Created</span>\n                        <span class=\"job-info-value\">${createdDate}</span>\n                    </div>\n                    <div class=\"job-info-item\">\n                        <span class=\"job-info-label\">AoA Count</span>\n                        <span class=\"job-info-value\">${job.totalAoA}</span>\n                    </div>\n                    ${job.currentAoA !== null ? `\n                        <div class=\"job-info-item\">\n                            <span class=\"job-info-label\">Current AoA</span>\n                            <span class=\"job-info-value\">${job.currentAoA}\u00B0</span>\n                        </div>\n                    ` : ''}\n                </div>\n                \n                ${job.status === 'running' || job.progress > 0 ? `\n                    <div class=\"progress-bar\">\n                        <div class=\"progress-fill\" style=\"width: ${progressWidth}%\"></div>\n                    </div>\n                    <p style=\"text-align: center; margin-top: 8px; color: #6c757d;\">\n                        ${progressWidth}% Complete\n                    </p>\n                ` : ''}\n                \n                ${job.error ? `\n                    <div style=\"color: #dc3545; font-size: 0.9rem; margin-top: 10px;\">\n                        Error: ${job.error}\n                    </div>\n                ` : ''}\n            </div>\n        `;\n    }\n\n    async showJobDetail(job) {\n        try {\n            this.currentJobId = job.id;\n            \n            // Load full job details\n            const response = await fetch(`/api/jobs/${job.id}`);\n            if (!response.ok) throw new Error('Failed to load job details');\n            \n            const fullJob = await response.json();\n            \n            // Update modal title\n            document.getElementById('modal-job-name').textContent = fullJob.name;\n            \n            // Render job details\n            document.getElementById('job-detail-content').innerHTML = \n                this.renderJobDetails(fullJob);\n            \n            // Show modal\n            document.getElementById('job-modal').classList.add('active');\n            \n            // If job is running, start live updates\n            if (fullJob.status === 'running') {\n                this.startJobDetailUpdates(job.id);\n            }\n        } catch (error) {\n            console.error('Error loading job details:', error);\n            this.showError('Failed to load job details');\n        }\n    }\n\n    renderJobDetails(job) {\n        let html = `\n            <div class=\"job-detail-grid\">\n                <div class=\"detail-section\">\n                    <h4>\uD83D\uDCCA Job Information</h4>\n                    <div class=\"detail-grid\">\n                        <div class=\"job-info-item\">\n                            <span class=\"job-info-label\">Status</span>\n                            <span class=\"job-status ${job.status}\">${job.status}</span>\n                        </div>\n                        <div class=\"job-info-item\">\n                            <span class=\"job-info-label\">Model</span>\n                            <span class=\"job-info-value\">${job.modelPath}</span>\n                        </div>\n                        <div class=\"job-info-item\">\n                            <span class=\"job-info-label\">Processors</span>\n                            <span class=\"job-info-value\">${job.processors}</span>\n                        </div>\n                        <div class=\"job-info-item\">\n                            <span class=\"job-info-label\">Created</span>\n                            <span class=\"job-info-value\">${new Date(job.created).toLocaleString()}</span>\n                        </div>\n                        ${job.started ? `\n                            <div class=\"job-info-item\">\n                                <span class=\"job-info-label\">Started</span>\n                                <span class=\"job-info-value\">${new Date(job.started).toLocaleString()}</span>\n                            </div>\n                        ` : ''}\n                        ${job.completed ? `\n                            <div class=\"job-info-item\">\n                                <span class=\"job-info-label\">Completed</span>\n                                <span class=\"job-info-value\">${new Date(job.completed).toLocaleString()}</span>\n                            </div>\n                        ` : ''}\n                    </div>\n                </div>\n\n                <div class=\"detail-section\">\n                    <h4>\uD83C\uDFAF Angle of Attacks</h4>\n                    <p><strong>Total:</strong> ${job.totalAoA} angles</p>\n                    <p><strong>Values:</strong> ${job.angleOfAttacks.join(', ')}\u00B0</p>\n                    ${job.status === 'running' && job.currentAoA !== null ? `\n                        <p><strong>Current:</strong> ${job.currentAoA}\u00B0</p>\n                        <div class=\"progress-bar\">\n                            <div class=\"progress-fill\" style=\"width: ${job.progress}%\"></div>\n                        </div>\n                        <p style=\"text-align: center; margin-top: 8px;\">${job.progress}% Complete</p>\n                    ` : ''}\n                </div>\n            </div>\n        `;\n\n        // Show results if completed\n        if (job.status === 'completed' && job.results) {\n            html += this.renderJobResults(job);\n        }\n\n        // Show logs\n        html += this.renderJobLogs(job);\n\n        // Add action buttons\n        html += `\n            <div style=\"margin-top: 25px; text-align: center; display: flex; gap: 15px; justify-content: center; flex-wrap: wrap;\">\n                ${job.status === 'completed' && (!job.results || !job.results.hasPlot) ? `\n                    <button class=\"btn postprocess-btn\" onclick=\"app.runPostprocessing(${job.id})\">\n                        \uD83D\uDCCA Run Postprocessing\n                    </button>\n                ` : ''}\n                <button class=\"btn btn-danger\" onclick=\"app.deleteJob(${job.id})\">\n                    \uD83D\uDDD1\uFE0F Delete Job\n                </button>\n            </div>\n        `;\n\n        return html;\n    }\n\n    renderJobResults(job) {\n        const results = job.results;\n        let html = `\n            <div class=\"detail-section\">\n                <h4>\uD83D\uDCC8 Results</h4>\n        `;\n\n        // Show download options\n        html += `\n            <div style=\"margin-bottom: 20px;\">\n                <h5>Downloads</h5>\n                <div style=\"display: flex; flex-wrap: wrap; gap: 10px;\">\n                    <a href=\"/api/jobs/${job.id}/download\" class=\"btn btn-info\">\n                        \uD83D\uDCC1 PCHIP Parameters (JSON)\n                    </a>\n                </div>\n            </div>\n        `;\n\n        // Show media files\n        if (results.hasGif || results.hasPlot) {\n            html += `\n                <div class=\"media-grid\">\n                    ${results.hasGif ? `\n                        <div class=\"media-item\">\n                            <h5>Animation</h5>\n                            <img src=\"/api/jobs/${job.id}/files/output.gif\" alt=\"Animation\">\n                        </div>\n                    ` : ''}\n                    ${results.hasPlot ? `\n                        <div class=\"media-item\">\n                            <h5>Coefficients Plot</h5>\n                            <img src=\"/api/jobs/${job.id}/files/coefficients_plot.png\" alt=\"Coefficients Plot\">\n                        </div>\n                    ` : ''}\n                </div>\n            `;\n        }\n\n        // Show AoA results\n        if (results.aoaResults && results.aoaResults.length > 0) {\n            html += `\n                <div style=\"margin-top: 25px;\">\n                    <h5>Individual AoA Results</h5>\n                    <div class=\"aoa-results\">\n            `;\n\n            results.aoaResults.forEach(aoaResult => {\n                html += `\n                    <div class=\"aoa-card\">\n                        <h6>${aoaResult.aoa}\u00B0</h6>\n                        <div class=\"aoa-data\">\n                            Cl: ${aoaResult.data.Cl?.toFixed(4) || 'N/A'}<br>\n                            Cd: ${(aoaResult.data.CdPressure + aoaResult.data.CdViscous)?.toFixed(4) || 'N/A'}<br>\n                            Cm: ${aoaResult.data.CmPitch?.toFixed(4) || 'N/A'}\n                        </div>\n                        <div style=\"display: flex; gap: 5px; justify-content: center; flex-wrap: wrap;\">\n                            <a href=\"/api/jobs/${job.id}/download/${aoaResult.aoa}\" class=\"btn btn-secondary\" style=\"font-size: 0.8rem; padding: 6px 10px;\">\n                                \uD83D\uDCC4 JSON\n                            </a>\n                            ${aoaResult.hasRender ? `\n                                <button class=\"btn btn-secondary\" style=\"font-size: 0.8rem; padding: 6px 10px;\" \n                                        onclick=\"app.showImage('/api/jobs/${job.id}/files/render_${aoaResult.aoa}.png')\">\n                                    \uD83D\uDDBC\uFE0F Image\n                                </button>\n                            ` : ''}\n                        </div>\n                    </div>\n                `;\n            });\n\n            html += `\n                    </div>\n                </div>\n            `;\n        }\n\n        html += `</div>`;\n        return html;\n    }\n\n    renderJobLogs(job) {\n        return `\n            <div class=\"detail-section\">\n                <h4>\uD83D\uDCCB Logs</h4>\n                <div class=\"logs-container\" id=\"job-logs\">\n                    ${job.logs && job.logs.length > 0 \n                        ? job.logs.map(log => `<div class=\"log-entry\">${this.escapeHtml(log)}</div>`).join('')\n                        : '<div class=\"log-entry\">No logs available</div>'\n                    }\n                </div>\n            </div>\n        `;\n    }\n\n    async deleteJob(jobId) {\n        if (!confirm('Are you sure you want to delete this job?')) {\n            return;\n        }\n\n        try {\n            const response = await fetch(`/api/jobs/${jobId}`, {\n                method: 'DELETE'\n            });\n\n            if (!response.ok) throw new Error('Failed to delete job');\n\n            this.closeModal();\n            await this.loadJobs();\n            this.showSuccess('Job deleted successfully');\n        } catch (error) {\n            console.error('Error deleting job:', error);\n            this.showError('Failed to delete job');\n        }\n    }\n\n    startJobDetailUpdates(jobId) {\n        // Clear any existing interval\n        if (this.jobDetailInterval) {\n            clearInterval(this.jobDetailInterval);\n        }\n\n        this.jobDetailInterval = setInterval(async () => {\n            try {\n                const response = await fetch(`/api/jobs/${jobId}`);\n                if (!response.ok) return;\n                \n                const job = await response.json();\n                \n                // Update the modal content\n                document.getElementById('job-detail-content').innerHTML = \n                    this.renderJobDetails(job);\n                \n                // If job is no longer running, stop updates\n                if (job.status !== 'running') {\n                    clearInterval(this.jobDetailInterval);\n                    this.jobDetailInterval = null;\n                }\n            } catch (error) {\n                console.error('Error updating job details:', error);\n            }\n        }, 5000); // Update every 5 seconds\n    }\n\n    startAutoRefresh() {\n        this.refreshInterval = setInterval(() => {\n            this.loadJobs();\n        }, 10000); // Refresh every 10 seconds\n    }\n\n    closeModal() {\n        document.getElementById('job-modal').classList.remove('active');\n        \n        // Clear job detail updates\n        if (this.jobDetailInterval) {\n            clearInterval(this.jobDetailInterval);\n            this.jobDetailInterval = null;\n        }\n    }\n\n    showImage(src) {\n        // Simple image viewer - could be enhanced with a proper lightbox\n        window.open(src, '_blank');\n    }\n\n    showLoading() {\n        document.getElementById('jobs-loading').style.display = 'block';\n        document.getElementById('jobs-list').style.display = 'none';\n    }\n\n    hideLoading() {\n        document.getElementById('jobs-loading').style.display = 'none';\n        document.getElementById('jobs-list').style.display = 'block';\n    }\n\n    showSuccess(message) {\n        this.showNotification(message, 'success');\n    }\n\n    showError(message) {\n        this.showNotification(message, 'error');\n    }\n\n    showNotification(message, type) {\n        // Simple notification system\n        const notification = document.createElement('div');\n        notification.className = `notification ${type}`;\n        notification.textContent = message;\n        notification.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            padding: 15px 25px;\n            border-radius: 8px;\n            color: white;\n            font-weight: 600;\n            z-index: 1100;\n            background: ${type === 'success' ? '#28a745' : '#dc3545'};\n            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n            animation: slideIn 0.3s ease;\n        `;\n\n        document.body.appendChild(notification);\n\n        setTimeout(() => {\n            notification.style.animation = 'slideOut 0.3s ease';\n            setTimeout(() => notification.remove(), 300);\n        }, 4000);\n    }\n\n    escapeHtml(text) {\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n\n    // Authentication Methods\n    async checkAuthStatus() {\n        try {\n            const response = await fetch('/api/auth/status');\n            const data = await response.json();\n            this.authenticated = data.authenticated;\n        } catch (error) {\n            console.error('Error checking auth status:', error);\n            this.authenticated = false;\n        }\n    }\n\n    async login() {\n        try {\n            const formData = new FormData(document.getElementById('login-form'));\n            const response = await fetch('/api/auth/login', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    username: formData.get('username'),\n                    password: formData.get('password')\n                })\n            });\n\n            if (response.ok) {\n                this.authenticated = true;\n                this.showMainContent();\n                await this.loadModels();\n                this.loadJobs();\n                this.startAutoRefresh();\n                this.startCpuMonitoring();\n                this.showSuccess('Login successful!');\n            } else {\n                const error = await response.json();\n                this.showError(error.error || 'Login failed');\n            }\n        } catch (error) {\n            this.showError('Login failed: ' + error.message);\n        }\n    }\n\n    async logout() {\n        try {\n            await fetch('/api/auth/logout', { method: 'POST' });\n            this.authenticated = false;\n            this.stopIntervals();\n            this.showAuthSection();\n            this.showSuccess('Logged out successfully');\n        } catch (error) {\n            this.showError('Logout failed: ' + error.message);\n        }\n    }\n\n    showAuthSection() {\n        document.getElementById('auth-section').style.display = 'block';\n        document.getElementById('main-content').style.display = 'none';\n    }\n\n    showMainContent() {\n        document.getElementById('auth-section').style.display = 'none';\n        document.getElementById('main-content').style.display = 'block';\n    }\n\n    stopIntervals() {\n        if (this.refreshInterval) clearInterval(this.refreshInterval);\n        if (this.cpuInterval) clearInterval(this.cpuInterval);\n    }\n\n    // File Upload Methods\n    async uploadFile() {\n        try {\n            const fileInput = document.getElementById('file-upload');\n            const file = fileInput.files[0];\n            \n            if (!file) {\n                this.showError('Please select a file');\n                return;\n            }\n\n            const formData = new FormData();\n            formData.append('stlFile', file);\n\n            const statusDiv = document.getElementById('upload-status');\n            statusDiv.textContent = 'Uploading...';\n            statusDiv.className = '';\n\n            const response = await fetch('/api/upload', {\n                method: 'POST',\n                body: formData\n            });\n\n            const result = await response.json();\n\n            if (response.ok) {\n                statusDiv.textContent = `\u2705 ${result.message}`;\n                statusDiv.className = 'success';\n                fileInput.value = '';\n                document.getElementById('upload-btn').disabled = true;\n                \n                // Reload models\n                await this.loadModels();\n                this.showSuccess('File uploaded successfully!');\n            } else {\n                statusDiv.textContent = `\u274C ${result.error}`;\n                statusDiv.className = 'error';\n                this.showError(result.error);\n            }\n        } catch (error) {\n            console.error('Upload error:', error);\n            document.getElementById('upload-status').textContent = `\u274C Upload failed`;\n            document.getElementById('upload-status').className = 'error';\n            this.showError('Upload failed: ' + error.message);\n        }\n    }\n\n    async loadModels() {\n        try {\n            const response = await fetch('/api/models');\n            if (!response.ok) throw new Error('Failed to load models');\n            \n            this.availableModels = await response.json();\n            const select = document.getElementById('model-path');\n            \n            select.innerHTML = '<option value=\"\">Select a model...</option>';\n            this.availableModels.forEach(model => {\n                const option = document.createElement('option');\n                option.value = model.path;\n                option.textContent = `${model.name} (${this.formatFileSize(model.size)})`;\n                select.appendChild(option);\n            });\n        } catch (error) {\n            console.error('Error loading models:', error);\n            this.showError('Failed to load available models');\n        }\n    }\n\n    formatFileSize(bytes) {\n        if (bytes === 0) return '0 Bytes';\n        const k = 1024;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n\n    // CPU Monitoring Methods\n    startCpuMonitoring() {\n        this.loadCpuUsage(); // Load immediately\n        this.cpuInterval = setInterval(() => {\n            this.loadCpuUsage();\n        }, 2000); // Update every 2 seconds\n    }\n\n    async loadCpuUsage() {\n        try {\n            const response = await fetch('/api/system/cpu');\n            if (!response.ok) throw new Error('Failed to load CPU data');\n            \n            const data = await response.json();\n            this.renderCpuUsage(data);\n        } catch (error) {\n            console.error('Error loading CPU usage:', error);\n        }\n    }\n\n    renderCpuUsage(data) {\n        // Update overall CPU\n        const overallElement = document.querySelector('.cpu-percentage');\n        if (overallElement) {\n            overallElement.textContent = `${data.overall.toFixed(1)}%`;\n            overallElement.className = `cpu-percentage ${this.getCpuClass(data.overall)}`;\n        }\n\n        // Update CPU cores\n        const coresContainer = document.getElementById('cpu-cores');\n        if (!coresContainer) return;\n\n        // Create cores grid if it doesn't exist or has changed\n        if (coresContainer.children.length !== data.cores.length) {\n            coresContainer.innerHTML = '';\n            \n            data.cores.forEach((core, index) => {\n                const coreDiv = document.createElement('div');\n                coreDiv.className = 'cpu-core';\n                coreDiv.innerHTML = `\n                    <div class=\"cpu-core-label\">Core ${index}</div>\n                    <div class=\"cpu-core-value\">0%</div>\n                    <div class=\"cpu-bar\">\n                        <div class=\"cpu-bar-fill\" style=\"width: 0%\"></div>\n                    </div>\n                `;\n                coresContainer.appendChild(coreDiv);\n            });\n        }\n\n        // Update core values\n        data.cores.forEach((core, index) => {\n            const coreDiv = coresContainer.children[index];\n            if (!coreDiv) return;\n\n            const valueDiv = coreDiv.querySelector('.cpu-core-value');\n            const barFill = coreDiv.querySelector('.cpu-bar-fill');\n            const usage = core.load || 0;\n\n            valueDiv.textContent = `${usage.toFixed(1)}%`;\n            valueDiv.className = `cpu-core-value ${this.getCpuClass(usage)}`;\n            barFill.style.width = `${Math.min(usage, 100)}%`;\n            barFill.className = `cpu-bar-fill`;\n            coreDiv.className = `cpu-core ${this.getCpuClass(usage)}`;\n        });\n    }\n\n    getCpuClass(usage) {\n        if (usage < 25) return 'cpu-low';\n        if (usage < 50) return 'cpu-medium';\n        if (usage < 75) return 'cpu-high';\n        return 'cpu-critical';\n    }\n\n    // Enhanced Job Management\n    async runPostprocessing(jobId) {\n        try {\n            const response = await fetch(`/api/jobs/${jobId}/postprocess`, {\n                method: 'POST'\n            });\n\n            if (response.ok) {\n                this.showSuccess('Postprocessing started successfully');\n                // Reload job details\n                if (this.currentJobId === jobId) {\n                    setTimeout(() => this.showJobDetail({ id: jobId }), 1000);\n                }\n            } else {\n                const error = await response.json();\n                this.showError('Postprocessing failed: ' + error.error);\n            }\n        } catch (error) {\n            this.showError('Postprocessing failed: ' + error.message);\n        }\n    }\n}\n\n// Add CSS animations for notifications\nconst style = document.createElement('style');\nstyle.textContent = `\n    @keyframes slideIn {\n        from {\n            transform: translateX(100%);\n            opacity: 0;\n        }\n        to {\n            transform: translateX(0);\n            opacity: 1;\n        }\n    }\n    \n    @keyframes slideOut {\n        from {\n            transform: translateX(0);\n            opacity: 1;\n        }\n        to {\n            transform: translateX(100%);\n            opacity: 0;\n        }\n    }\n`;\ndocument.head.appendChild(style);\n\n// Initialize the app when DOM is loaded\nlet app;\ndocument.addEventListener('DOMContentLoaded', () => {\n    app = new DiscAnalyzer();\n});\n\n// Global function for delete job (called from rendered HTML)\nwindow.app = null;\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.app = app;\n});"],
  "mappings": "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",
  "names": []
}
